(import jdn)
(import sh)

(defn- get-url-sha256
  [url]
  (->> (sh/$< curl -L -s --fail-early ,url |sha256sum)
       (string/split " ")
       first))

(defn- remove-suffix
  [sfx s]
  (if (string/has-suffix? sfx s)
    (string/slice s 0 (dec (- (length sfx))))
    s))

(defn- add-prefix
  [pfx s]
  (if (string/has-prefix? pfx s) s (string pfx s)))

(defn fetch-source-info
  [repo rev]
  (cond
    (string/has-prefix? "https://github.com" repo)
    (do
      (def base (remove-suffix ".git" repo))
      (def last-slash (last (string/find-all "/" base)))
      (def name (string/slice base (inc last-slash)))
      (def archive-url (string base "/tarball/" rev))
      (def archive-hash (string "sha256:" (get-url-sha256 archive-url)))
      (def archive-name (string name ".tar.gz"))
      {:name name
       :archive-name archive-name
       :archive-url archive-url
       :archive-hash archive-hash})
    (error (string/format "unable to get tarball url for repo=%j rev=%j" repo rev))))

(defn main
  [& args]
  (def lock-data (jdn/decode (file/read stdin :all)))
  (print "# Source list generated by jpm-to-hermes\n")
  (each dep lock-data
    (def source-info (fetch-source-info (dep :repo) (dep :sha)))
    (printf "(defsrc %j\n  :file-name %j\n  :url %j\n  :hash %j)\n"
            (symbol (add-prefix "janet-" (source-info :name)) "-src")
            (add-prefix "janet-" (source-info :archive-name))
            (source-info :archive-url)
            (source-info :archive-hash)))
  (print "# End of generated source list"))
